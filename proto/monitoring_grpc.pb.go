// proto/monitoring.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/monitoring.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_GetStatus_FullMethodName    = "/monitoring.AgentService/GetStatus"
	AgentService_StartCapture_FullMethodName = "/monitoring.AgentService/StartCapture"
	AgentService_StopCapture_FullMethodName  = "/monitoring.AgentService/StopCapture"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent Service - combines monitoring and packet capture.
type AgentServiceClient interface {
	// Monitoring methods
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Packet capture methods
	StartCapture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PacketData], error)
	StopCapture(ctx context.Context, in *StopCaptureRequest, opts ...grpc.CallOption) (*CaptureStats, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, AgentService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StartCapture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PacketData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_StartCapture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CaptureRequest, PacketData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StartCaptureClient = grpc.ServerStreamingClient[PacketData]

func (c *agentServiceClient) StopCapture(ctx context.Context, in *StopCaptureRequest, opts ...grpc.CallOption) (*CaptureStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaptureStats)
	err := c.cc.Invoke(ctx, AgentService_StopCapture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// Agent Service - combines monitoring and packet capture.
type AgentServiceServer interface {
	// Monitoring methods
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Packet capture methods
	StartCapture(*CaptureRequest, grpc.ServerStreamingServer[PacketData]) error
	StopCapture(context.Context, *StopCaptureRequest) (*CaptureStats, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedAgentServiceServer) StartCapture(*CaptureRequest, grpc.ServerStreamingServer[PacketData]) error {
	return status.Errorf(codes.Unimplemented, "method StartCapture not implemented")
}
func (UnimplementedAgentServiceServer) StopCapture(context.Context, *StopCaptureRequest) (*CaptureStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapture not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StartCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).StartCapture(m, &grpc.GenericServerStream[CaptureRequest, PacketData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentService_StartCaptureServer = grpc.ServerStreamingServer[PacketData]

func _AgentService_StopCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StopCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_StopCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StopCapture(ctx, req.(*StopCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _AgentService_GetStatus_Handler,
		},
		{
			MethodName: "StopCapture",
			Handler:    _AgentService_StopCapture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartCapture",
			Handler:       _AgentService_StartCapture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/monitoring.proto",
}

const (
	PollerService_ReportStatus_FullMethodName   = "/monitoring.PollerService/ReportStatus"
	PollerService_ForwardPackets_FullMethodName = "/monitoring.PollerService/ForwardPackets"
)

// PollerServiceClient is the client API for PollerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Poller Service.
type PollerServiceClient interface {
	ReportStatus(ctx context.Context, in *PollerStatusRequest, opts ...grpc.CallOption) (*PollerStatusResponse, error)
	ForwardPackets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PacketData, PacketResponse], error)
}

type pollerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollerServiceClient(cc grpc.ClientConnInterface) PollerServiceClient {
	return &pollerServiceClient{cc}
}

func (c *pollerServiceClient) ReportStatus(ctx context.Context, in *PollerStatusRequest, opts ...grpc.CallOption) (*PollerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PollerStatusResponse)
	err := c.cc.Invoke(ctx, PollerService_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollerServiceClient) ForwardPackets(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PacketData, PacketResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PollerService_ServiceDesc.Streams[0], PollerService_ForwardPackets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PacketData, PacketResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PollerService_ForwardPacketsClient = grpc.BidiStreamingClient[PacketData, PacketResponse]

// PollerServiceServer is the server API for PollerService service.
// All implementations must embed UnimplementedPollerServiceServer
// for forward compatibility.
//
// Poller Service.
type PollerServiceServer interface {
	ReportStatus(context.Context, *PollerStatusRequest) (*PollerStatusResponse, error)
	ForwardPackets(grpc.BidiStreamingServer[PacketData, PacketResponse]) error
	mustEmbedUnimplementedPollerServiceServer()
}

// UnimplementedPollerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPollerServiceServer struct{}

func (UnimplementedPollerServiceServer) ReportStatus(context.Context, *PollerStatusRequest) (*PollerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedPollerServiceServer) ForwardPackets(grpc.BidiStreamingServer[PacketData, PacketResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ForwardPackets not implemented")
}
func (UnimplementedPollerServiceServer) mustEmbedUnimplementedPollerServiceServer() {}
func (UnimplementedPollerServiceServer) testEmbeddedByValue()                       {}

// UnsafePollerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollerServiceServer will
// result in compilation errors.
type UnsafePollerServiceServer interface {
	mustEmbedUnimplementedPollerServiceServer()
}

func RegisterPollerServiceServer(s grpc.ServiceRegistrar, srv PollerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPollerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PollerService_ServiceDesc, srv)
}

func _PollerService_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollerServiceServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollerService_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollerServiceServer).ReportStatus(ctx, req.(*PollerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollerService_ForwardPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PollerServiceServer).ForwardPackets(&grpc.GenericServerStream[PacketData, PacketResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PollerService_ForwardPacketsServer = grpc.BidiStreamingServer[PacketData, PacketResponse]

// PollerService_ServiceDesc is the grpc.ServiceDesc for PollerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.PollerService",
	HandlerType: (*PollerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportStatus",
			Handler:    _PollerService_ReportStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardPackets",
			Handler:       _PollerService_ForwardPackets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/monitoring.proto",
}
